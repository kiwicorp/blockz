var searchIndex = JSON.parse('{\
"blockz":{"doc":"Blockz is an opinionated library that aims to make it a …","t":[24,24,0,0,0,23,8,3,8,3,16,16,16,12,12,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,24,24,23,16,8,8,8,8,8,16,16,16,16,10,10,10,10,10,10,10,10,10],"n":["Configuration","Singleton","configuration","prelude","singleton","singleton_fn","Configuration","DirectConfiguration","EasyConfiguration","EnvConfiguration","Opts","Result","Result","_phantom","_phantom_t","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","load","load","load","load","load","load","try_from","try_from","try_into","try_into","type_id","type_id","Configuration","Singleton","singleton_fn","Inner","Singleton","SingletonFn","SingletonFnMut","SingletonFnMutWithArg","SingletonFnWithArg","SingletonResult","SingletonResult","SingletonResult","SingletonResult","call_once","call_once","call_once","call_once","init_singleton","use_mut_singleton","use_mut_singleton_with_arg","use_singleton","use_singleton_with_arg"],"q":["blockz","","","","","","blockz::configuration","","","","","","","","","","","","","","","","","","","","","","","","","","","","","blockz::prelude","","","blockz::singleton","","","","","","","","","","","","","","","","","",""],"d":["Derive the Configuration trait.","Derive the Singleton trait.","Support for common configuration behaviour and loading …","Blockz prelude - useful re-exports.","Support for singletons.","Modify a method on a type that implements the Singleton …","Common behaviour of configurations.","Direct configuration that just returns the passed value.","An easy configuration is a configuration that can be …","Configuration that can be sourced from environment …","The type of options container this Configuration accepts …","The result type that can be produced by loading the …","The result type that can be produced by loading the …","","","","","","","","","","","Load the configuration.","Load the configuration.","","","","","","","","","","","Derive the Configuration trait.","Derive the Singleton trait.","Modify a method on a type that implements the Singleton …","Inner value contained by the singleton.","A singleton.","Trait that defines the behaviour of a function that uses …","Trait that defines the behaviour of a function that uses …","Trait that defines the behaviour of a function that uses …","Trait that defines the behaviour of a function that uses …","The result of a singleton function (a Future).","The result of a singleton function (a Future).","The result of a singleton function (a Future).","The result of a singleton function (a Future).","","","","","Initialize the singleton.","Use the singleton with a mutable reference.","Use the singleton with an immutable reference and an …","Use the singleton with an immutable reference.","Use the singleton with an immutable reference and an …"],"i":[0,0,0,0,0,0,0,0,0,0,1,1,2,3,4,3,4,3,4,3,4,3,4,1,2,3,3,4,4,3,4,3,4,3,4,0,0,0,5,0,0,0,0,0,6,7,8,9,6,7,8,9,5,5,5,5,5],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["pin",3],["box",3]]],[[],[["pin",3],["box",3]]],[[],[["pin",3],["box",3]]],[[],[["pin",3],["box",3]]],[[],[["pin",3],["box",3]]],[[],[["pin",3],["box",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["result",6]],[[],[["box",3],["pin",3]]],[[],[["box",3],["pin",3]]],[[],[["box",3],["pin",3]]],[[],[["box",3],["pin",3]]]],"p":[[8,"Configuration"],[8,"EasyConfiguration"],[3,"DirectConfiguration"],[3,"EnvConfiguration"],[8,"Singleton"],[8,"SingletonFn"],[8,"SingletonFnWithArg"],[8,"SingletonFnMut"],[8,"SingletonFnMutWithArg"]]},\
"blockz_derive":{"doc":"Blockz derive.","t":[24,24,0,0,0,0,0,0,23,5,5,3,3,6,6,6,11,11,11,11,11,0,12,11,0,12,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,3,11,11,11,11,12,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,12,11,11,11,11,11,11,8,10,8,16,16,8,10,10,5,5,5,5,5,5,17,3,3,3,12,11,11,11,11,11,11,11,11,11,0,0,0,12,11,11,11,11,0,12,11,11,11,0,12,11,11,12,0,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,12,11,12,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,12,3,11,12,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,3,17,17,17,17,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,17,13,4,4,4,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12],"n":["Configuration","Singleton","common","configuration","errors","factory","paths","singleton","singleton_fn","create_doc","create_lit_str","ConfigurationFactory","ConfigurationOpts","DynFactory","DynFactoryProduct","FnNewDynFactory","borrow","borrow","borrow_mut","borrow_mut","build","direct","direct","direct_confiuration_factory","env","env","env_configuration_factory","from","from","from_derive_input","get_new_dyn_factory_fn","input","into","into","new","opts","pick_new_dyn_factory_fn","try_from","try_from","try_into","try_into","type_id","type_id","DirectConfigurationFactory","borrow","borrow_mut","build","from","input","into","new_dyn","try_from","try_into","type_id","EnvConfigurationFactory","EnvConfigurationOpts","borrow","borrow","borrow_mut","borrow_mut","build","default","from","from","from_list","get_configuration_impl_load_arg","get_configuration_impl_opts","input","into","into","new_dyn","opts","prefix","prefix_source","try_from","try_from","try_into","try_into","type_id","type_id","ProcMacroErrorExt","as_compile_errors","Factory","Product","Product","ReusableFactory","build","build","anyhow_path","blockz_path","envy_path","once_cell_path","std_path","tokio_path","SINGLETON_STATIC_PREFIX","SingletonFactory","SingletonFnFactory","SingletonOpts","base","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","build","create_static_ident","derive_static","derive_trait","facade_fn","fn_type","from","from","from","from_derive_input","impl_fn","input","into","into","into","lock","lock","new","new","opts","singleton_fns","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","SingletonStaticFactory","borrow","borrow_mut","build","from","into","lock","new","static_ident","try_from","try_into","type_id","type_name","SingletonTraitFactory","borrow","borrow_mut","build","from","impl_init_singleton","impl_use_mut_singleton","impl_use_mut_singleton_with_arg","impl_use_singleton","impl_use_singleton_with_arg","into","lock","new","static_ident","try_from","try_into","type_id","type_name","FacadeFnFactory","add_inline_always_attr","base","borrow","borrow_mut","build","build_facade_impl","build_use_mut_singleton_stmt","build_use_mut_singleton_with_arg_stmt","build_use_singleton_stmt","build_use_singleton_with_arg_stmt","fn_type","from","impl_fn","into","new","remove_fn_receiver","replace_fn_block","try_from","try_into","type_id","ImplFnFactory","SINGLETON_FN_MUT_PREFIX","SINGLETON_FN_MUT_WITH_ARG_PREFIX","SINGLETON_FN_PREFIX","SINGLETON_FN_WITH_ARG_PREFIX","add_automatically_derived_attr","apply_replace_legend","base","borrow","borrow_mut","build","fix_fn_args","fix_fn_block","fn_type","from","into","make_fn_private","new","rename_fn","try_from","try_into","type_id","Mutex","RwLock","SingletonLock","borrow","borrow_mut","default","from","from_list","from_string","into","to_guard","to_mut_guard","to_new_lock_expr","to_type","try_from","try_into","type_id","FnArgNotReceiver","FnArgNotTyped","FnHasNoInputs","FnReceiverNotRef","Multiple","Mut","MutWithArg","NonMut","NonMutWithArg","PatTypeNoIdent","SINGLETON_FN_TUPLE_ARG_NAME","Single","SingletonFnArgs","SingletonFnError","SingletonFnType","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build_impl_fn_call_arg","build_impl_fn_replacement_legend","build_impl_fn_sig_arg","fmt","fn_arg_as_receiver","fn_arg_as_typed","from","from","from","into","into","into","into","pat_type_as_ident","span","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","arg_ident","arg_idents","arg_type","tuple_ident","tuple_type"],"q":["blockz_derive","","","","","","","","","blockz_derive::common","","blockz_derive::configuration","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","blockz_derive::configuration::direct","","","","","","","","","","","blockz_derive::configuration::env","","","","","","","","","","","","","","","","","","","","","","","","","","blockz_derive::errors","","blockz_derive::factory","","","","","","blockz_derive::paths","","","","","","blockz_derive::singleton","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","blockz_derive::singleton::derive_static","","","","","","","","","","","","","blockz_derive::singleton::derive_trait","","","","","","","","","","","","","","","","","","blockz_derive::singleton::facade_fn","","","","","","","","","","","","","","","","","","","","","blockz_derive::singleton::impl_fn","","","","","","","","","","","","","","","","","","","","","","blockz_derive::singleton::lock","","","","","","","","","","","","","","","","","blockz_derive::singleton::singleton_fns","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","blockz_derive::singleton::singleton_fns::SingletonFnArgs","","","",""],"d":["Derive the Configuration trait.","Derive the Singleton trait.","Common functions.","#[derive(Configuration)].","Errors.","Factories that build code.","Paths to libraries used by the expansion of blockz …","Singleton macro.","Modify a method on a type that implements the Singleton …","Create a doc attribute.","Create a LitStr.","A factory that builds implementations for the …","Options used by the configuration factory.","A dynamic factory that produces a token stream.","A product produced by a dyn factory.","A function that creates a specialized factory.","","","","","","Direct configuration factory.","","","Env configuration factory.","","","","","","Returns a function that creates the new dynamic factory …","","","","Create a new configuration factory.","","","","","","","","","Factory that builds a Configuration implementation based …","","","","","","","Create a new direct configuration factory.","","","","Factory that builds a Configuration implementation based …","Configuration options for a configuration backed by envy.","","","","","Build the envy configuration trait implementation.","","","","","","","","","","Create a new envy configuration factory.","","","","","","","","","","Common error behaviour expected from proc macro crates.","Convert the error to the appropriate compile error(s).","A factory thar produces a product.","The product produced by this factory.","The product produced by this factory.","A factory that can be reused (by taking &mut self instead …","Build the product.","Build the product.","","","","","","","Prefix for the generated singleton static.","A factory that builds singletons.","A factory that builds singleton fns.","","","","","","","","","Build the Singleton implementation.","Build the singleton fn facade and impl.","Create the name of the static variable that holds the …","Implement the singleton static.","Implement the singleton static.","Facade fn factory.","","","","","","Impl fn factory.","","","","","Singleton lock.","","Create a new singleton factory.","Create a new singleton fn factory.","","Singleton fns utilities.","","","","","","","","","","Factory that builds a singleton static.","","","Build the singleton static.","","","","Create a new singleton static factory.","","","","","","Factory that builds a singleton trait implementation.","","","Build the trait implementation.","","Implement Singleton::init_singleton.","Implement Singleton::use_mut_singleton.","Implement Singleton::use_singleton_mut_with_arg.","Implement Singleton::use_singleton.","Implement Singleton::use_singleton_with_arg.","","","Create a new singleton trait factory.","","","","","","Factory that builds the implementation of singleton fns.","Adds an #[inline(always)] to the target function.","","","","Build the facade fn.","Build the facade fn implementation.","Builds a Singleton::use_mut_singleton.","Builds a Singleton::use_mut_singleton_with_arg.","Builds a Singleton::use_singleton.","Builds a Singleton::use_singleton_with_arg.","","","","","Create a new FacadeFnFactory.","Remove the receiver of the target function.","Replace the block of a function.","","","","Factory that builds the implementation of singleton fns.","Prefix for an impl fn used by a singleton mut fn.","Prefix for an impl fn used by a singleton mut fn with arg.","Prefix for an impl fn used by a singleton fn.","Prefix for an impl fn used by a singleton fn with arg.","Adds an #[automatically_derived] to the target function.","Recursevly apply a replace legend to a token stream.","","","","","Fixes the args of a function, if necessary.","Fixes the block of a function, if necessary.","","","","Make a function private.","Create a new ImplFnFactory.","Renames a function according to the appropriate singleton …","","","","tokio::sync::Mutex","tokio::sync::RwLock","The lock behing a singleton.","","","","","","","","Create a new lock guard from a lock identifier.","Create a new mutable lock guard from a lock identifier.","Create a lock initialization expression that sets the …","Create a new lock type with the inner type.","","","","","","","","Multiple arguments.","","","","","","The name of the tuple argument for singleton fns.","Single argument.","Arguments for a SingletonFn.","Errors produced when attempting to build singleton fns.","SingletonFn type.","","","","","","","Build the argument used for a singleton call by the …","","Build the fn input that will be accepted by the impl fn.","","Get a fn argument as a receiver.","Get a fn argument as a typed argument.","","","","","","","","Get a pat type as an ident.","","","","","","","","","","","","","","The identifier of the function argument.","The idents of the original function arguments.","The type of the function argument.","The ident of the tuple function argument.","The type of the tuple function argument."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,0,2,1,0,2,1,1,2,2,1,1,1,2,1,1,1,1,2,1,2,1,2,0,3,3,3,3,3,3,3,3,3,3,0,0,4,5,4,5,4,5,4,5,5,4,4,4,4,5,4,4,5,5,4,5,4,5,4,5,0,6,0,7,8,0,7,8,0,0,0,0,0,0,0,0,0,0,9,10,9,11,10,9,11,10,9,10,0,0,0,9,10,9,11,11,0,10,10,9,11,0,11,10,9,10,0,10,9,11,10,9,11,10,9,11,0,12,12,12,12,12,12,12,12,12,12,12,12,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,18,19,19,19,19,17,0,18,0,0,0,17,19,18,17,19,18,18,18,18,17,0,0,17,19,18,17,17,19,18,0,17,17,17,19,19,18,18,17,19,18,17,19,18,20,21,20,21,21],"f":[null,null,null,null,null,null,null,null,null,[[["string",3]],["tokenstream",3]],[[["string",3]],["litstr",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,null,[[["configurationopts",3]],[["box",3],["option",4]]],null,null,[[["configurationopts",3],["option",4]],[["box",3],["option",4]]],[[]],[[]],[[["deriveinput",3]],["result",6]],[[],[["box",3],["fnonce",8]]],null,[[]],[[]],[[["deriveinput",3]],[["result",4],["error",3]]],null,[[["configurationopts",3],["option",4]],[["box",3],["option",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],null,[[]],[[["deriveinput",3],["configurationopts",3]],[["box",3],["reusablefactory",8]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[],["envconfigurationopts",3]],[[]],[[]],[[],["result",6]],[[],[["result",4],["tokenstream",3],["error",3]]],[[],["tokenstream",3]],null,[[]],[[]],[[["deriveinput",3],["configurationopts",3]],[["box",3],["reusablefactory",8]]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["tokenstream",3]],null,null,null,null,[[]],[[]],[[],["tokenstream",3]],[[],["tokenstream",3]],[[],["tokenstream",3]],[[],["tokenstream",3]],[[],["tokenstream",3]],[[],["tokenstream",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["ident",3]],["ident",3]],null,null,null,null,[[]],[[]],[[]],[[["deriveinput",3]],["result",6]],null,null,[[]],[[]],[[]],null,null,[[["deriveinput",3]],[["result",4],["error",3]]],[[["itemfn",3]],["result",6]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],[[]],null,[[["ident",3],["singletonlock",4]]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[],["tokenstream",3]],[[],["tokenstream",3]],[[],["tokenstream",3]],[[],["tokenstream",3]],[[],["tokenstream",3]],[[]],null,[[["ident",3],["singletonlock",4]]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[["itemfn",3]],["result",6]],null,[[]],[[]],[[]],[[["itemfn",3]],["result",6]],[[["ident",3]],["tokenstream",3]],[[["ident",3],["singletonfnargs",4]],["tokenstream",3]],[[["ident",3]],["tokenstream",3]],[[["ident",3],["singletonfnargs",4]],["tokenstream",3]],null,[[]],null,[[]],[[["itemfn",3],["singletonfntype",4]]],[[["itemfn",3]],["result",6]],[[["itemfn",3],["tokenstream",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[["itemfn",3]],["result",6]],[[["tokenstream",3],["hashmap",3]],["tokenstream",3]],null,[[]],[[]],[[]],[[["itemfn",3]],["result",6]],[[["itemfn",3]],["result",6]],null,[[]],[[]],[[["itemfn",3]]],[[["itemfn",3],["singletonfntype",4]]],[[["itemfn",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[],["result",6]],[[["str",15]],["result",6]],[[]],[[["ident",3]],["tokenstream",3]],[[["ident",3]],["tokenstream",3]],[[["ident",3]],["tokenstream",3]],[[["ident",3]],["tokenstream",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["tokenstream",3]],[[],[["option",4],["hashmap",3]]],[[],[["result",6],["fnarg",4]]],[[["formatter",3]],["result",6]],[[["fnarg",4]],[["receiver",3],["result",6]]],[[["fnarg",4]],[["result",6],["pattype",3]]],[[]],[[]],[[]],[[],["error",3]],[[]],[[]],[[]],[[["pattype",3]],[["result",6],["ident",3]]],[[],["span",3]],[[],["string",3]],[[],["result",4]],[[["itemfn",3]],["result",6]],[[],["result",4]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null],"p":[[3,"ConfigurationFactory"],[3,"ConfigurationOpts"],[3,"DirectConfigurationFactory"],[3,"EnvConfigurationFactory"],[3,"EnvConfigurationOpts"],[8,"ProcMacroErrorExt"],[8,"Factory"],[8,"ReusableFactory"],[3,"SingletonFnFactory"],[3,"SingletonFactory"],[3,"SingletonOpts"],[3,"SingletonStaticFactory"],[3,"SingletonTraitFactory"],[3,"FacadeFnFactory"],[3,"ImplFnFactory"],[4,"SingletonLock"],[4,"SingletonFnError"],[4,"SingletonFnArgs"],[4,"SingletonFnType"],[13,"Single"],[13,"Multiple"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};